import * as tslib_1 from "tslib";
import { Title, DOCUMENT } from '@angular/platform-browser';
import { Inject, Injectable } from '@angular/core';
import { Router, NavigationEnd, ActivatedRoute } from '@angular/router';
import 'rxjs/add/operator/filter';
import { PageTitlePositioning } from './models/page-title-positioning';
import { MetaLoader } from './meta.loader';
var MetaService = (function () {
    function MetaService(loader, router, document, titleService, activatedRoute) {
        var _this = this;
        this.loader = loader;
        this.router = router;
        this.document = document;
        this.titleService = titleService;
        this.activatedRoute = activatedRoute;
        this.metaSettings = loader.getSettings();
        this.isMetaSet = {};
        this.router.events
            .filter(function (event) { return (event instanceof NavigationEnd); })
            .subscribe(function (routeData) {
            var route = _this.activatedRoute;
            while (route.children.length > 0) {
                route = route.firstChild;
                if (!!route.snapshot.routeConfig.data) {
                    var meta = route.snapshot.routeConfig.data['meta'];
                    _this.updateMeta(routeData.urlAfterRedirects, meta);
                }
                else
                    _this.updateMeta(routeData.urlAfterRedirects);
            }
        });
    }
    MetaService.prototype.setTitle = function (title, override) {
        if (override === void 0) { override = false; }
        var ogTitleElement = this.getOrCreateMetaTag('og:title');
        var defaultTitle = !!this.metaSettings.defaults ? this.metaSettings.defaults['title'] : '';
        switch (this.metaSettings.pageTitlePositioning) {
            case PageTitlePositioning.AppendPageTitle:
                title = (!override
                    && !!this.metaSettings.pageTitleSeparator
                    && !!this.metaSettings.applicationName
                    ? (this.metaSettings.applicationName + this.metaSettings.pageTitleSeparator)
                    : '')
                    + (!!title ? title : (defaultTitle || ''));
                break;
            case PageTitlePositioning.PrependPageTitle:
                title = (!!title ? title : (defaultTitle || ''))
                    + (!override
                        && !!this.metaSettings.pageTitleSeparator
                        && !!this.metaSettings.applicationName
                        ? (this.metaSettings.pageTitleSeparator + this.metaSettings.applicationName)
                        : '');
                break;
            default:
                throw new Error("Invalid pageTitlePositioning specified [" + this.metaSettings.pageTitlePositioning + "]!");
        }
        if (!title)
            console.warn('WARNING: No "page title" specified.');
        ogTitleElement.setAttribute('content', title);
        this.titleService.setTitle(title);
    };
    MetaService.prototype.setTag = function (tag, value) {
        if (tag === 'title')
            throw new Error("Attempt to set " + tag + " through 'setTag': 'title' is a reserved tag name. "
                + "Please use 'MetaService.setTitle' instead.");
        value = !!value
            ? value
            : !!this.metaSettings.defaults ? this.metaSettings.defaults[tag] : '';
        var tagElement = this.getOrCreateMetaTag(tag);
        tagElement.setAttribute('content', tag === 'og:locale' ? value.replace(/-/g, '_') : value);
        this.isMetaSet[tag] = true;
        if (tag === 'description') {
            var ogDescriptionElement = this.getOrCreateMetaTag('og:description');
            ogDescriptionElement.setAttribute('content', value);
        }
        else if (tag === 'author') {
            var ogAuthorElement = this.getOrCreateMetaTag('og:author');
            ogAuthorElement.setAttribute('content', value);
        }
        else if (tag === 'publisher') {
            var ogPublisherElement = this.getOrCreateMetaTag('og:publisher');
            ogPublisherElement.setAttribute('content', value);
        }
        else if (tag === 'og:locale') {
            var availableLocales = !!this.metaSettings.defaults
                ? this.metaSettings.defaults['og:locale:alternate']
                : '';
            this.updateLocales(value, availableLocales);
            this.isMetaSet['og:locale:alternate'] = true;
        }
        else if (tag === 'og:locale:alternate') {
            var ogLocaleElement = this.getOrCreateMetaTag('og:locale');
            var currentLocale = ogLocaleElement.getAttribute('content');
            this.updateLocales(currentLocale, value);
            this.isMetaSet['og:locale'] = true;
        }
    };
    MetaService.prototype.createMetaTag = function (name) {
        var el = this.document.createElement('meta');
        el.setAttribute(name.lastIndexOf('og:', 0) === 0 ? 'property' : 'name', name);
        this.document.head.appendChild(el);
        return el;
    };
    MetaService.prototype.getOrCreateMetaTag = function (name) {
        var selector = "meta[name=\"" + name + "\"]";
        if (name.lastIndexOf('og:', 0) === 0)
            selector = "meta[property=\"" + name + "\"]";
        var el = this.document.querySelector(selector);
        if (!el)
            el = this.createMetaTag(name);
        return el;
    };
    MetaService.prototype.updateLocales = function (currentLocale, availableLocales) {
        var _this = this;
        if (!currentLocale)
            currentLocale = !!this.metaSettings.defaults
                ? this.metaSettings.defaults['og:locale']
                : '';
        var html = this.document.querySelector('html');
        html.setAttribute('lang', currentLocale);
        var selector = "meta[property=\"og:locale:alternate\"]";
        var elements = this.document.querySelectorAll(selector);
        elements = Array.prototype.slice.call(elements);
        elements.forEach(function (el) {
            _this.document.head.removeChild(el);
        });
        if (!!currentLocale && !!availableLocales) {
            availableLocales.split(',')
                .forEach(function (locale) {
                if (currentLocale !== locale) {
                    var el = _this.createMetaTag('og:locale:alternate');
                    el.setAttribute('content', locale.replace(/-/g, '_'));
                }
            });
        }
    };
    MetaService.prototype.updateMeta = function (currentUrl, meta) {
        var _this = this;
        if (!meta) {
            var fallbackTitle = !!this.metaSettings.defaults
                ? (this.metaSettings.defaults['title'] || this.metaSettings['applicationName'])
                : this.metaSettings['applicationName'];
            this.setTitle(fallbackTitle, true);
        }
        else {
            if (meta.disabled) {
                this.updateMeta(currentUrl);
                return;
            }
            this.setTitle(meta.title, meta.override);
            Object.keys(meta)
                .forEach(function (key) {
                var value = meta[key];
                if (key === 'title' || key === 'override')
                    return;
                else if (key === 'og:locale')
                    value = value.replace(/-/g, '_');
                else if (key === 'og:locale:alternate') {
                    var currentLocale = meta['og:locale'];
                    _this.updateLocales(currentLocale, meta[key]);
                    return;
                }
                _this.setTag(key, value);
            });
        }
        if (!!this.metaSettings.defaults)
            Object.keys(this.metaSettings.defaults)
                .forEach(function (key) {
                var value = _this.metaSettings.defaults[key];
                if ((!!meta && (key in _this.isMetaSet || key in meta)) || key === 'title' || key === 'override')
                    return;
                else if (key === 'og:locale')
                    value = value.replace(/-/g, '_');
                else if (key === 'og:locale:alternate') {
                    var currentLocale = !!meta ? meta['og:locale'] : undefined;
                    _this.updateLocales(currentLocale, _this.metaSettings.defaults[key]);
                    return;
                }
                _this.setTag(key, value);
            });
        var url = ((this.metaSettings.applicationUrl || '/') + currentUrl)
            .replace(/(https?:\/\/)|(\/)+/g, '$1$2')
            .replace(/\/$/g, '');
        this.setTag('og:url', url || '/');
    };
    return MetaService;
}());
MetaService = tslib_1.__decorate([
    Injectable(),
    tslib_1.__param(2, Inject(DOCUMENT)),
    tslib_1.__metadata("design:paramtypes", [MetaLoader,
        Router, Object, Title,
        ActivatedRoute])
], MetaService);
export { MetaService };
